pacman::p_load(haven, dplyr)
read_sav("input/data/original/ene-2023-09-aso.sav")
data<-read_sav("input/data/original/ene-2023-09-aso.sav")
base <- data %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
# Filtramos manualmente solo apps de delivery
base_plataformas <- base %>% filter(pd_especifique %in% c("APLICACION DE PEDIDOS YA", "CORNERSHOP", "EUBER EAST", "JUMBO SHOPPERS", "PEDIDOS YA", "RAPPI", "UBER EATS", "UBEREATS", "WABI") | sda_pd_especifique %in% c("CORNERSHOP", "PEDIDOS YA", "RAPPI", "UBER EATS"))
dim(base_plataformas)
table(base_plataformas$sexo)
table(data$b1)
table(base_plataformas$b1)
pacman::p_load(haven, dplyr)
# Cargar ene 2023 Agosto-sept-octubre
data<-read_sav("input/data/original/ene-2023-09-aso.sav")
data<-read_sav("input/data/original/ene-2023-08-jas.sav")
# Cargar ene 2023 Agosto-sept-octubre
data_aso<-read_sav("input/data/original/ene-2023-09-aso.sav")
data_jas<-read_sav("input/data/original/ene-2023-08-jas.sav")
base_aso <- data_aso %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
base_jas <- data_jas %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
table(base_jas$pd_especifique)
table(base_aso$pd_especifique)
table(base_aso$sda_pd_especifique)
# Filtramos manualmente solo apps de delivery
base_plataformas <- base_aso %>% filter(pd_especifique %in% c("APLICACION DE PEDIDOS YA", "CORNERSHOP", "EUBER EAST", "JUMBO SHOPPERS", "PEDIDOS YA", "RAPPI", "UBER EATS", "UBEREATS", "WABI") | sda_pd_especifique %in% c("CORNERSHOP", "PEDIDOS YA", "RAPPI", "UBER EATS"))
dim(base_plataformas)
table(base_plataformas$sexo)
View(base_plataformas)
sjmisc::descr(base_plataformas$edad, weights = base_plataformas$fact_cal)
base_plataformas %>% sjmisc::descr(edad, weights = fact_cal)
base_plataformas %>% sjmisc::descr(sexo , weights = fact_cal)
base_plataformas %>% sjmisc::descr(as_factor(sexo) , weights = fact_cal)
base_aso %>% sjmisc::descr(edad, weights = fact_cal)
pacman::p_load(haven, dplyr, survey, srvy)
pacman::p_load(haven, dplyr, survey, srvyr)
?svydesign
diseño_encuesta <- svydesign(ids = ~1,
strata = estrato,
weights = ~fact_cal,
data = base_plataformas)
diseño_encuesta <- svydesign(ids = ~1,
strata = estrato,
weights = ~fact_cal,
data = base_plataformas)
base_plataformas$estrato
diseño_encuesta <- svydesign(ids = ~1,
strata = estrato,
weights = ~fact_cal,
data = base_plataformas)
diseño_encuesta <- svydesign(ids = ~1,
weights = ~fact_cal,
data = base_plataformas)
diseño_encuesta <- svydesign(ids = ~1,
strata = ~estrato,
weights = ~fact_cal,
data = base_plataformas)
svytotal(~edad + sexo, diseño_encuesta)
diseño_encuesta <- svydesign(ids = ~1,
#                             strata = ~estrato,
weights = ~fact_cal,
data = base_plataformas)
svytotal(~edad + sexo, diseño_encuesta)
svytotal(edad + sexo, diseño_encuesta)
svytotal(~edad, diseño_encuesta)
summarytools::descr(base_plataformas$edad, weights = "fact_cal")
test<- dplyr::select(base_plataformas, edad, fact_cal, sexo)
summarytools::descr(test, weights = "fact_cal")
summarytools::descr(test, weights = fact_cal)
?summarytools::descr
test <- base_plataformas %>% dplyr::select(edad, fact_cal, sexo) %>% as.data.frame()
summarytools::descr(test, weights = "fact_cal")
tabla_frecuencias_categoria <- svytable(~sexo, diseño_encuesta)
tabla_frecuencias_categoria
?svytable
?sjPlot::sjt.xtab
sjPlot::sjt.xtab(var.row = base_plataformas$sexo,
show.summary = F, emph.total = T)
sjPlot::sjt.xtab(base_plataformas$sexo,
show.summary = F, emph.total = T)
sjPlot::sjt.xtab(base_plataformas$sexo)
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F, emph.total = T)
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F)
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F, emph.total = T)
?sjPlot::sjt.xtab
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F, emph.total = T, weight.by = base_plataformas$fact_cal)
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F, emph.total = T,
weight.by = base_plataformas$fact_cal,
encoding = "UTF-8")
sjPlot::sjt.xtab(base_jas$sexo, base_jas$cine,
show.summary = F, emph.total = T,
weight.by = base_jas$fact_cal,
encoding = "UTF-8")
# Cargar ene 2022 abril-mayo-junio para comparar con informe
data_amj<-read_sav("input/data/original/ene-2022-05-amj.sav")
base_amj <- data_amj %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
View(base_jas)
sjPlot::sjt.xtab(base_amj$sexo, base_amj$cine,
show.summary = F, emph.total = T,
weight.by = base_amj$fact_cal,
encoding = "UTF-8")
base_amj %>% sjmisc::descr(edad, weights = fact_cal)
base_amj <- data_amj %>% dplyr::filter(plataformas_digitales==1) # Primera o segunda actividad en aplicación o internet
base_amj %>% sjmisc::descr(edad, weights = fact_cal)
table(base_aso$sda_pd_especifique)
# Cargar ene 2023 Agosto-sept-octubre
data_aso<-read_sav("input/data/original/ene-2023-09-aso.sav")
base_aso <- data_aso %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
table(base_aso$pd_especifique)
# Filtramos manualmente solo apps de delivery
base_plataformas <- base_aso %>% filter(pd_especifique %in% c("APLICACION DE PEDIDOS YA", "CORNERSHOP", "EUBER EAST", "JUMBO SHOPPERS", "PEDIDOS YA", "RAPPI", "UBER EATS", "UBEREATS", "WABI") | sda_pd_especifique %in% c("CORNERSHOP", "PEDIDOS YA", "RAPPI", "UBER EATS"))
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F, emph.total = T,
weight.by = base_plataformas$fact_cal,
encoding = "UTF-8")
?sjPlot::sjt.xtab
diseño_encuesta <- svydesign(ids = ~1,
#                             strata = ~estrato,
weights = ~fact_cal,
data = base_plataformas)
svytotal(~cine, diseño_encuesta)
?svytotal
svytotal(~cine, sexo, diseño_encuesta)
svytotal(~cine, ~sexo, diseño_encuesta)
svytotal(~cine, diseño_encuesta)
diseño_encuesta <- base_plataformas %>% as_survey_design(ids = 1,
weights = fact_cal)
svytotal(~cine, diseño_encuesta)
svytable(~cine, diseño_encuesta)
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F, emph.total = T,
weight.by = base_plataformas$fact_cal,
encoding = "UTF-8")
ic <- svyby(~cine, ~cine, diseño_encuesta, svytotal, na.rm = TRUE)
# Calcular las frecuencias por categoría
resultados_frecuencias <- svytable(~cine, diseño_encuesta)
# Convertir los resultados a un dataframe
df_frecuencias <- as.data.frame(resultados_frecuencias)
ic <- svyby(~cine, ~cine, diseño_encuesta, svytotal, na.rm = TRUE)
pacman::p_load(haven, dplyr, survey, srvyr, ggplot2)
# Crear un gráfico de barras con intervalos de confianza
ggplot(df_frecuencias, aes(x = cine, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = ic[, "mean"] - ic[, "se"], ymax = ic[, "mean"] + ic[, "se"]), width = 0.4, color = "red") +
labs(title = "Gráfico de Barras con Intervalos de Confianza",
x = "Cine",
y = "Frecuencia") +
theme_minimal()
diseño_encuesta <- base_plataformas %>% as_survey_design(ids = 1,
weights = fact_cal)
# Calcular las frecuencias por categoría
resultados_frecuencias <- svytable(~cine, diseño_encuesta)
# Convertir los resultados a un dataframe
df_frecuencias <- as.data.frame(resultados_frecuencias)
ic <- svyby(~cine, ~cine, diseño_encuesta, svytotal, na.rm = TRUE)
# Crear un gráfico de barras con intervalos de confianza
ggplot(df_frecuencias, aes(x = cine, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = ic[, "mean"] - ic[, "se"], ymax = ic[, "mean"] + ic[, "se"]), width = 0.4, color = "red") +
labs(title = "Gráfico de Barras con Intervalos de Confianza",
x = "Cine",
y = "Frecuencia") +
theme_minimal()
# Calcular las frecuencias por categoría
resultados_frecuencias <- svytable(~cine, diseño_encuesta)
# Convertir los resultados a un dataframe
df_frecuencias <- as.data.frame(resultados_frecuencias)
# Calcular intervalos de confianza
ic <- svyby(~cine, ~cine, diseño_encuesta, svytotal, na.rm = TRUE)
# Convertir a dataframe
df_ic <- as.data.frame(ic)
# Crear un gráfico de barras con intervalos de confianza
ggplot(df_frecuencias, aes(x = cine, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = df_ic[, "mean"] - df_ic[, "se"], ymax = df_ic[, "mean"] + df_ic[, "se"]),
width = 0.4, color = "red") +
labs(title = "Gráfico de Barras con Intervalos de Confianza",
x = "Cine",
y = "Frecuencia") +
theme_minimal()
# Crear un gráfico de barras con intervalos de confianza
ggplot(df_frecuencias, aes(x = cine, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = df_ic$mean - df_ic$se, ymax = df_ic$mean + df_ic$se),
width = 0.4, color = "red") +
labs(title = "Gráfico de Barras con Intervalos de Confianza",
x = "Cine",
y = "Frecuencia") +
theme_minimal()
View(df_frecuencias)
View(df_ic)
View(df_ic)
# Crear un gráfico de barras con intervalos de confianza
ggplot(df_frecuencias, aes(x = cine, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = df_frecuencias$cine - df_ic$se, ymax = df_frecuencias$cine + df_ic$se),
width = 0.4, color = "red") +
labs(title = "Gráfico de Barras con Intervalos de Confianza",
x = "Cine",
y = "Frecuencia") +
theme_minimal()
# Crear un gráfico de barras con intervalos de confianza
ggplot(df_frecuencias, aes(x = cine, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = df_frecuencias$Freq - df_ic$se, ymax = df_frecuencias$Freq + df_ic$se),
width = 0.4, color = "red") +
labs(title = "Gráfico de Barras con Intervalos de Confianza",
x = "Cine",
y = "Frecuencia") +
theme_minimal()
# Convertir los resultados a un dataframe
df_frecuencias <- resultados_frecuencias %>% as.data.frame() %>% filter(cine!=999)
# Calcular intervalos de confianza
ic <- svyby(~cine, ~cine, diseño_encuesta, svytotal, na.rm = TRUE)
# Convertir a dataframe
df_ic <- as.data.frame(ic)
# Crear un gráfico de barras con intervalos de confianza
ggplot(df_frecuencias, aes(x = cine, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = df_frecuencias$Freq - df_ic$se, ymax = df_frecuencias$Freq + df_ic$se),
width = 0.4, color = "red") +
labs(title = "Gráfico de Barras con Intervalos de Confianza",
x = "Cine",
y = "Frecuencia") +
theme_minimal()
View(df_frecuencias)
View(ic)
# Convertir a dataframe
df_ic <- ic %>% as.data.frame() %>% filter(cine!=999)
# Calcular intervalos de confianza
ic <- svyby(~cine, ~cine, diseño_encuesta, svytotal, na.rm = TRUE)
# Convertir a dataframe
df_ic <- ic %>% as.data.frame() %>% filter(cine!=999)
# Convertir a dataframe
df_ic <- as.data.frame(ic)
df_ic <- filter(df_ic$cine!=999)
df_ic <- df_ic %>%  filter(cine!=999)
df_ic <- df_ic %>% filter(cine!=999)
# Calcular intervalos de confianza
ic <- svyby(~cine, ~cine, diseño_encuesta, svytotal, na.rm = TRUE)
# Convertir a dataframe
df_ic <- as.data.frame(ic)
df_ic <- df_ic %>% filter(cine!=999)
df_ic <- df_ic %>% filter(cine!=999)
df_ic <- as.factor(df_ic$cine)
# Convertir a dataframe
df_ic <- as.data.frame(ic)
df_ic$cine <- as.factor(df_ic$cine)
df_ic <- df_ic %>% filter(cine!=999)
df_ic <- df_ic %>% filter(cine<10)
df_ic <- df_ic %>% set_na(., na = c(999))
df_ic <- df_ic %>% sjmisc::set_na(., na = c(999))
df_ic <- df_ic %>% filter(!is.na(cine))
df_ic <- na.omit(df_ic)
# Crear un gráfico de barras con intervalos de confianza
ggplot(df_frecuencias, aes(x = cine, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_errorbar(aes(ymin = df_frecuencias$Freq - df_ic$se, ymax = df_frecuencias$Freq + df_ic$se),
width = 0.4, color = "red") +
labs(title = "Gráfico de Barras con Intervalos de Confianza",
x = "Cine",
y = "Frecuencia") +
theme_minimal()
diseño_encuesta <- base_plataformas %>% as_survey_design(ids = 1,
weights = fact_cal)
View(base_plataformas)
ds <- base_plataformas %>% as_survey_design(ids = 1,
strata = estrato,
weights = fact_cal)
## Con error estandar
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE))
ds <- base_plataformas %>% as_survey_design(ids = 1,
weights = fact_cal)
## Con error estandar
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE))
# Con intervalos de confianza
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE,
vartype = c("ci")))
ds %>% group_by(cine) %>%
summarise(proportion = survey_mean(vartype = c("ci"),na.rm = TRUE))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9))
base_plataformas$cine <- as.factor(base_plataformas$cine)
ds <- base_plataformas %>% as_survey_design(ids = 1,
weights = fact_cal)
## Con error estandar
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE))
# Con intervalos de confianza
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE,
vartype = c("ci")))
ds %>% group_by(cine) %>%
summarise(proportion = survey_mean(vartype = c("ci"),na.rm = TRUE))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
scale_x_discrete() +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9))
sjlabelled::get_labels(base_plataformas$cine)
sjlabelled::get_label(base_plataformas$cine)
pacman::p_load(haven, dplyr, survey, srvyr, ggplot2)
# Cargar ene 2023 Agosto-sept-octubre
data_aso<-read_sav("input/data/original/ene-2023-09-aso.sav")
base_aso <- data_aso %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
# Filtramos manualmente solo apps de delivery
base_plataformas <- base_aso %>% filter(pd_especifique %in% c("APLICACION DE PEDIDOS YA", "CORNERSHOP", "EUBER EAST", "JUMBO SHOPPERS", "PEDIDOS YA", "RAPPI", "UBER EATS", "UBEREATS", "WABI") | sda_pd_especifique %in% c("CORNERSHOP", "PEDIDOS YA", "RAPPI", "UBER EATS"))
base_plataformas$cine <- as_factor(base_plataformas$cine)
ds <- base_plataformas %>% as_survey_design(ids = 1,
weights = fact_cal)
## Con error estandar
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE))
# Con intervalos de confianza
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE,
vartype = c("ci")))
ds %>% group_by(cine) %>%
summarise(proportion = survey_mean(vartype = c("ci"),na.rm = TRUE))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
scale_x_discrete(labels=) +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9)) +
guides(fill = FALSE)
pacman::p_load(haven, dplyr, survey, srvyr, ggplot2)
# Cargar ene 2023 Agosto-sept-octubre
data_aso<-read_sav("input/data/original/ene-2023-09-aso.sav")
base_aso <- data_aso %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
# Filtramos manualmente solo apps de delivery
base_plataformas <- base_aso %>% filter(pd_especifique %in% c("APLICACION DE PEDIDOS YA", "CORNERSHOP", "EUBER EAST", "JUMBO SHOPPERS", "PEDIDOS YA", "RAPPI", "UBER EATS", "UBEREATS", "WABI") | sda_pd_especifique %in% c("CORNERSHOP", "PEDIDOS YA", "RAPPI", "UBER EATS"))
save(base_plataformas, file="input/data/proc/base_plataformas.RData")
pacman::p_load(dplyr, survey, srvyr, ggplot2)
load(file="input/data/proc/base_plataformas.RData")
base_plataformas$cine <- as_factor(base_plataformas$cine)
ds <- base_plataformas %>% as_survey_design(ids = 1,
weights = fact_cal)
## Con error estandar
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9)) +
guides(fill = FALSE)
base_plataformas %>% sjPlot::sjt.xtab(sexo, cine,
show.summary = F, emph.total = T,
weight.by = fact_cal,
encoding = "UTF-8")
base_plataformas %>% sjPlot::sjt.xtab(sexo, cine,
show.summary = F, emph.total = T,
weight.by = fact_cal,
encoding = "UTF-8")
View(base_plataformas)
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F, emph.total = T,
weight.by = base_plataformas$fact_cal,
encoding = "UTF-8")
sjPlot::sjt.xtab(base_plataformas$sexo, base_plataformas$cine,
show.summary = F, emph.total = T,
encoding = "UTF-8")
??as_factor
pacman::p_load(dplyr, survey, srvyr, ggplot2, sjlabelled)
pacman::p_load(dplyr, survey, srvyr, ggplot2, sjlabelled)
load(file="input/data/proc/base_plataformas.RData")
base_plataformas$cine <- as_factor(base_plataformas$cine)
ds <- base_plataformas %>% as_survey_design(ids = 1,
weights = fact_cal)
## Con error estandar
ds %>% group_by(cine) %>% summarise(educacion=survey_total(na.rm = TRUE))
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9)) +
guides(fill = FALSE)
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
scale_x_discrete()+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9)) +
guides(fill = FALSE)
ds %>% group_by(cine) %>%
summarise(educacion=survey_total(na.rm = TRUE, vartype=c("ci"),level=c(0.95))) %>%
ggplot(aes(x=cine,y=educacion,fill=cine))+
geom_bar(stat = "identity") +
ylab(label="Cantidad")+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_errorbar(aes(ymin=educacion_low, ymax=educacion_upp),
width=0.2, position=position_dodge(.9)) +
guides(fill = FALSE)
pacman::p_load(haven, dplyr, survey, srvyr, ggplot2, sjlabelled)
# base procesada
load(file="input/data/proc/base_plataformas.RData")
# base original para comparación
# Cargar ene 2023 Agosto-sept-octubre
data_aso<-read_sav("input/data/original/ene-2023-09-aso.sav")
table(base_aso$pd_especifique)
data_aso$plataformas_digitales <- sjlabelled::as_factor(data_aso$plataformas_digitales)
ds_test <- data_aso %>% as_survey_design(ids = 1,
strata = strato,
weights = fact_cal)
View(data_aso)
ds_test <- data_aso %>% as_survey_design(ids = 1,
strata = estrato,
weights = fact_cal)
ds_test %>%
group_by(plataformas_digitales) %>%
summarise(total = survey_total(na.rm = TRUE, vartype = c("ci"), level = c(0.95))) %>%
```
table(data_aso$plataformas_digitales)
data_aso <- data_aso %>% set_na(., na = c(88, 99))
data_aso$plataformas_digitales <- sjlabelled::as_factor(data_aso$plataformas_digitales)
ds_test <- data_aso %>% as_survey_design(ids = 1,
strata = estrato,
weights = fact_cal)
ds_test %>%
group_by(plataformas_digitales) %>%
summarise(total = survey_total(na.rm = TRUE, vartype = c("ci"), level = c(0.95))) %>%
```
ds_test <- data_aso %>% as_survey_design(ids = 1,
weights = fact_cal)
ds_test %>%
group_by(plataformas_digitales) %>%
summarise(total = survey_total(na.rm = TRUE, vartype = c("ci"), level = c(0.95))) %>%
```
ds_test <- data_aso %>% as_survey_design(ids = 1,
strata = estrato,
weights = fact_cal)
ds_test %>%
group_by(plataformas_digitales) %>%
summarise(total = survey_total(na.rm = TRUE, vartype = c("ci"), level = c(0.95))) %>%
```
ds_test %>% group_by(plataformas_digitales) %>% summarise(educacion=survey_total(na.rm = TRUE))
ds_test %>% group_by(plataformas_digitales) %>% summarise(cantidad=survey_total(na.rm = TRUE))
# base original para comparación
# Cargar ene 2023 Agosto-sept-octubre
data_aso<-read_sav("input/data/original/ene-2023-09-aso.sav")
base_aso <- data_aso %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
data_aso$plataformas_digitales <- sjlabelled::as_factor(data_aso$plataformas_digitales)
ds_test <- data_aso %>% as_survey_design(ids = 1,
strata = estrato,
weights = fact_cal)
ds_test %>% group_by(plataformas_digitales) %>% summarise(cantidad=survey_total(na.rm = TRUE))
pacman::p_load(haven, dplyr)
# Cargar ene 2023 Agosto-sept-octubre
data_aso<-read_sav("input/data/original/ene-2023-09-aso.sav")
base_aso <- data_aso %>% dplyr::filter(plataformas_digitales==1 | sda_pd == 1) # Primera o segunda actividad en aplicación o internet
base_amj %>% sjmisc::descr(edad, weights = fact_cal)
